<?php
/**
 * @file
 * Install implementation file.
 */

/**
 * Implements hook_schema().
 */
function app_link_schema() {
  $schema['applink'] = array(
    'description' => 'Table that holds information about links to Mobile Apps',
    'export' => array(
      'key' => 'path',
      'key name' => 'Site path',
      'primary key' => 'lid',
      // Exports will be defined as $applink.
      'identifier' => 'applink',
      // Function hook name.
      'default hook' => 'default_applink',
      'api' => array(
        'owner' => 'app_link',
        // Base name for api include files.
        'api' => 'default_applink',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'lid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        // Do not export database-only keys.
        'no export' => TRUE,
      ),
      'path' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique name to refer to App.',
      ),
      'platform_data' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'URLs and related metadata per platform.',
      ),

    ),
    'primary key' => array('lid'),
    'unique keys' => array(
      'path' => array('path'),
    ),
  );

  return $schema;
}

/**
 * Update platform signatures.
 */
function app_link_update_7101() {
  $links = db_query("SELECT * FROM {applink}");
  foreach ($links as $link) {
    $changed = FALSE;
    $platform_data = unserialize($link->platform_data);
    foreach ($platform_data as $key => $data) {
      if (strpos($key, 'app_link_platform_') !== 0) {
        $platform_data['app_link_platform_' . $key] = $data;
        unset($platform_data[$key]);
        $changed = TRUE;
      }
    }

    if ($changed) {
      db_update('applink')
        ->fields(array('platform_data' => serialize($platform_data)))
        ->condition('lid', $link->lid)
        ->execute();
    }
  }
}

/**
 * Update platform signatures.
 */
function app_link_update_7102() {
  $links = db_query("SELECT * FROM {applink}");
  foreach ($links as $link) {
    $changed = FALSE;
    $platform_data = unserialize($link->platform_data);
    foreach ($platform_data as $key => $data) {
      if (strpos($key, 'app_link_platform_ios') !== 0) {
        $platform_data['app_link_platform_iphone'] = $data;
        $platform_data['app_link_platform_ipad'] = $data;
        unset($platform_data[$key]);
        $changed = TRUE;
      }
    }

    if ($changed) {
      db_update('applink')
        ->fields(array('platform_data' => serialize($platform_data)))
        ->condition('lid', $link->lid)
        ->execute();
    }
  }
}

/**
 * Move all the web_url data in the DB column to the corresponding platform.
 */
function app_link_update_7103() {
  $links = db_query("SELECT * FROM {applink}");
  foreach ($links as $link) {
    $platform_data = unserialize($link->platform_data);
    if (empty($link->web_url)) {
      continue;
    }
    $web_url = app_link_parse_url($link->web_url);

    $platform_data['app_link_platform_fallback'] = array(
      'fallback_url' => $web_url,
      'supports_qs' => TRUE,
      'supports_path' => TRUE,
      'path_whitelist' => '',
    );

    $link->platform_data = $platform_data;
    drupal_write_record('applink', $link, 'lid');
  }
}

/**
 * Drop hardcoded fallback URL in favor of fallback platforms.
 */
function app_link_update_7104() {
  db_drop_field('applink', 'web_url');
}
